from cryptography.fernet import Fernet
import base64
from cryptography.hazmat.primitives import hashes

def hash(input):
    if not isinstance(input, bytes):
        input = input.encode()

    digest = hashes.Hash(hashes.SHA256())
    digest.update(input)
    hash = digest.finalize()

    return hash.hex()

filename = hash('prezime_ime') + ".encrypted"

def test_png(header):
    if header.startswith(b"\211PNG\r\n\032\n"):
        return True

def brute_force():
    # Reading from a file
    filename = "4812949d924828a97566cfd4ad134222a97ac5522bf8bac74f25b9d210318ac3.encrypted"
    with open(filename, "rb") as file:
        ciphertext = file.read()

    ctr = 0
    while True:
            key_bytes = ctr.to_bytes(32, "big")
            key = base64.urlsafe_b64encode(key_bytes)
            if not (ctr+1) % 1000:
                print(f"[*] Keys tested: {ctr+1:,}", end="\r")


            try:
                plaintext = Fernet(key).decrypt(ciphertext)
                header = plaintext[:32]
                if test_png(header):
                    print(f"[+] KEY FOUND: {key}")
                    # Writing to a file
                    with open("BINGO.png", "wb") as file:
                        file.write(plaintext)                    
                    break
            except Exception:
                pass
            ctr += 1


if __name__ == "__main__":
    brute_force()
