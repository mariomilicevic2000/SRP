from cryptography.hazmat.primitives import hashes, hmac
from cryptography.exceptions import InvalidSignature
import os

def verify_MAC(key, mac, message):
    if not isinstance(message, bytes):
        message = message.encode()

    h = hmac.HMAC(key, hashes.SHA256())
    h.update(message)
    try:
        h.verify(mac)
    except InvalidSignature:
        return False
    else:
        return True

def generate_MAC(key, message):
    if not isinstance(message, bytes):
        message = message.encode()

    h = hmac.HMAC(key, hashes.SHA256())
    h.update(message)
    signature = h.finalize()
    return signature

if __name__ == "__main__":
    key = "milicevic_mario".encode()

    path = os.path.join("challenges", "milicevic_mario", "mac_challenge")
    print(path)
  
    for ctr in range(1, 11):
        msg_filename = f"order_{ctr}.txt"
        filepath_msg = os.path.join(path, msg_filename)
        sig_filename = f"order_{ctr}.sig"
        filepath_sig = os.path.join(path, sig_filename)  
        #print(msg_filename)
        #print(sig_filename)

        with open(filepath_msg, "rb") as file:
           content_file = file.read()

        with open(filepath_sig, "rb") as file:
           signature = file.read()

        is_authentic = verify_MAC(key,signature, content_file)
        print(is_authentic)
        #print(f'Message {message.decode():>45} {"OK" if is_authentic else "NOK":<6}')

        # key = b"my super secret"

        # with open("message.txt", "rb") as file:
        #     content = file.read()

        # mac = generate_MAC(key, content)

        # with open("message.sig", "wb") as file:
        #     file.write(mac)

        # print(mac.hex())
        # with open("message.sig", "rb") as file:
        #    mac = file.read()

        # is_authentic = verify_MAC(key, mac, content)
        # print(is_authentic)
